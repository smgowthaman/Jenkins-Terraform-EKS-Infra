pipeline {
    agent any

    parameters {
            booleanParam(name: 'VALIDATE_TERRAFORM', defaultValue: false, description: 'Check To Validate Terraform Changes')
            booleanParam(name: 'PLAN_TERRAFORM', defaultValue: false, description: 'Check To Plan Terraform Changes')
            booleanParam(name: 'APPLY_TERRAFORM', defaultValue: false, description: 'Check To Apply Terraform Changes')
            booleanParam(name: 'DESTROY_TERRAFORM', defaultValue: false, description: 'Check To Apply Terraform Changes')
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Clean workspace before cloning (optional)
                deleteDir()

                // Clone the Git repository
                git branch: 'main',
                    url: 'https://github.com/smgowthaman/Jenkins-Terraform-EKS-Infra.git'

                sh "ls -lart"
            }
        }

        stage('Terraform Init') {
                    steps {
                       withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred-smg']]){
                            
                            sh 'echo "=================Terraform Init=================="'
                            sh 'terraform init'
                        
                    }
                }
        }
        stage('Terraform Validate') {
    steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred-smg']]) {
            
                sh 'echo "=================Terraform Validate=================="'
                sh 'terraform validate'
            
        }
    }
}
        stage('Terraform Plan') {
            steps {
                script {
                    if (params.PLAN_TERRAFORM) {
                       withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred-smg']]){
                            
                                sh 'echo "=================Terraform Plan=================="'
                                sh 'terraform plan'
                            
                        }
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    if (params.APPLY_TERRAFORM) {
                       withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred-smg']]){
                            
                                sh 'echo "=================Terraform Apply=================="'
                                sh 'terraform apply -auto-approve'
                                sh 'echo "Saving Terraform output to output.txt"'
                                sh 'terraform output > output.txt'
                                sh 'ls -lart'
                        }
                    }
                }
            }
        }

        stage('Terraform Destroy') {
    steps {
        script {
            if (params.DESTROY_TERRAFORM) {
               withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred-smg']]) {
                    
                        sh 'echo "=================Terraform Destroy=================="'
                        sh 'terraform destroy -auto-approve'
                    
                }
                 // List the workspace contents before cleaning
                sh 'echo "===== Before Cleaning Workspace ====="'
                sh 'ls -lart'
                
                // Clean workspace only after Terraform destroy
                cleanWs() // This will clean the workspace, including the Terraform state files
                
                // List the workspace contents after cleaning to verify
                sh 'echo "===== After Cleaning Workspace ====="'
                sh 'ls -lart'
            }
        }
    }
}
    }
        post {
        success {
            echo 'Terraform executed successfully!'
        }
        failure {
            echo 'Terraform execution failed!'
        }
        
    }

}
